---
import BlogLayout from "@/layouts/BlogLayout.astro";
import fetchApi from "@/lib/strapi";
import type Blog from "@/interfaces/blog";

const blogs = await fetchApi<Blog[]>({
  endpoint: "blogs",
  wrappedByKey: "data",
});

// Sort blogs by publish date, newest first
const sortedBlogs = [...blogs].sort((a, b) => 
  new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime()
);

const featuredBlogs = sortedBlogs.slice(0, 3);
const remainingBlogs = sortedBlogs.slice(3);

function formatDate(dateStr: string) {
  return new Date(dateStr).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}

const sortOptions = [
  { value: "newest", label: "Newest First" },
  { value: "oldest", label: "Oldest First" },
];
---

<BlogLayout title="Alan Bardales | Blog">
  <header class="blog-header">
    <h1>Latest Articles</h1>
    <!-- <div class="sort-control">
      <label for="sort">Sort by:</label>
      <select id="sort" class="sort-select">
        {sortOptions.map(option => (
          <option value={option.value}>{option.label}</option>
        ))}
      </select>
    </div> -->
  </header>

  {featuredBlogs.length > 0 && (
    <section class="featured-posts">
      <h2>Latest Posts</h2>
      <div class="featured-grid">
        {featuredBlogs.map((blog) => (
          <article class="blog-card featured">
            <div class="blog-content">
              <h2>
                <a href={`/blog/${blog.slug}`}>{blog.Title}</a>
              </h2>
              <time datetime={blog.createdAt}>
                {formatDate(blog.createdAt)}
              </time>
              {blog.Extract && (
                <p class="preview">{blog.Extract.slice(0, 150)}...</p>
              )}
              <a href={`/blog/${blog.slug}`} class="read-more">
                Read more →
              </a>
            </div>
          </article>
        ))}
      </div>
    </section>
  )}

  <section class="all-posts">
    <h2>All Posts</h2>
    <div class="blog-grid" id="posts-grid">
    {
      remainingBlogs.map((blog) => (
        <article class="blog-card">
          <div class="blog-content">
            <h2>
              <a href={`/blog/${blog.slug}`}>{blog.Title}</a>
            </h2>
            <time datetime={blog.createdAt}>
              {formatDate(blog.createdAt)}
            </time>
            {blog.Extract && (
              <p class="preview">{blog.Extract.slice(0, 150)}...</p>
            )}
            <a href={`/blog/${blog.slug}`} class="read-more">
              Read more →
            </a>
          </div>
        </article>
      ))
    }
  </div>
</BlogLayout>

<style>
  .blog-grid {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  }

  .blog-card {
    background: #fff;
    border: 1px solid #eaeaea;
    border-radius: 0.5rem;
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease;
  }

  .blog-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .blog-content {
    padding: 1.5rem;
  }

  .blog-content h2 {
    margin: 0 0 0.5rem 0;
    font-size: 1.5rem;
    line-height: 1.4;
  }

  .blog-content h2 a {
    color: #1a1a1a;
    text-decoration: none;
  }

  .blog-content h2 a:hover {
    color: #0070f3;
  }

  time {
    color: #666;
    font-size: 0.9rem;
    display: block;
    margin-bottom: 1rem;
  }

  .preview {
    color: #4a4a4a;
    font-size: 1rem;
    line-height: 1.6;
    margin: 1rem 0;
  }

  .read-more {
    display: inline-block;
    color: #0070f3;
    font-weight: 500;
    text-decoration: none;
  }

  .read-more:hover {
    text-decoration: underline;
  }

  .blog-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 3rem;
  }

  .sort-control {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .sort-select {
    padding: 0.5rem;
    border: 1px solid #eaeaea;
    border-radius: 0.25rem;
    background-color: white;
    font-family: inherit;
    cursor: pointer;
  }

  .sort-select:hover {
    border-color: #0070f3;
  }

  .featured-posts {
    margin-bottom: 4rem;
  }

  .featured-grid {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }

  .featured-badge {
    display: inline-block;
    background-color: #0070f3;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.8rem;
    margin-bottom: 1rem;
  }

  .blog-card.featured {
    border-color: #0070f3;
  }

  .all-posts h2 {
    margin-bottom: 2rem;
  }

  @media (max-width: 768px) {
    .blog-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }
  }
</style>

<script>
  function sortPosts(order: 'newest' | 'oldest') {
    const grid = document.getElementById('posts-grid');
    if (!grid) return;

    const posts = Array.from(grid.children);
    posts.sort((a, b) => {
      const dateA = new Date(a.querySelector('time')?.dateTime || '').getTime();
      const dateB = new Date(b.querySelector('time')?.dateTime || '').getTime();
      return order === 'newest' ? dateB - dateA : dateA - dateB;
    });

    grid.innerHTML = '';
    posts.forEach(post => grid.appendChild(post));
  }

  // Add event listener to sort select
  const sortSelect = document.querySelector('.sort-select');
  if (sortSelect) {
    sortSelect.addEventListener('change', (e) => {
      const target = e.target as HTMLSelectElement;
      sortPosts(target.value as 'newest' | 'oldest');
    });
  }
</script>
